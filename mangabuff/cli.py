import argparse
import json
import pathlib
from typing import Optional, Dict, Any, List
import time

from mangabuff.config import BASE_URL
from mangabuff.profiles.store import ProfileStore
from mangabuff.auth.login import update_profile_cookies
from mangabuff.services.club import find_boost_card_info
from mangabuff.services.inventory import ensure_own_inventory
from mangabuff.services.owners import iter_online_owners_by_pages
from mangabuff.services.trade import send_trades_to_online_owners
from mangabuff.services.har import analyze_har
from mangabuff.services.boost_monitor import BoostMonitor
from mangabuff.services.card_selector import select_suitable_card_for_trade

def load_target_card_from_file(profiles_dir: pathlib.Path, card_file: Optional[str] = None, debug: bool=False) -> Optional[Dict[str, Any]]:
    import random
    from mangabuff.utils.text import extract_card_id_from_href
    path: Optional[pathlib.Path] = None
    
    if card_file:
        p = pathlib.Path(card_file)
        if p.exists():
            path = p
    
    if not path:
        card_for_boost = profiles_dir / "card_for_boost.json"
        if card_for_boost.exists():
            path = card_for_boost
        else:
            files = sorted(
                profiles_dir.glob("card_*_from_*.json"),
                key=lambda p: p.stat().st_mtime,
                reverse=True,
            )
            if files:
                path = files[0]
            else:
                return None

    try:
        with path.open("r", encoding="utf-8") as f:
            data = json.load(f)
    except Exception:
        return None

    chosen = None
    if isinstance(data, dict):
        if any(k in data for k in ("card_id", "card", "id", "name", "rank")) and not any(isinstance(v, list) for v in data.values()):
            chosen = data
        else:
            candidates = []
            if "cards" in data and isinstance(data["cards"], list):
                candidates = data["cards"]
            else:
                for v in data.values():
                    if isinstance(v, list):
                        candidates = v
                        break
            if candidates:
                chosen = random.choice(candidates)
    elif isinstance(data, list):
        if not data:
            return None
        chosen = random.choice(data)

    if chosen is None:
        return None

    card_block = chosen.get("card") if isinstance(chosen, dict) else None
    card_id = None
    for key in ("card_id", "cardId", "id"):
        if key in (chosen or {}):
            card_id = chosen.get(key)
            break
    if card_id is None and card_block:
        card_id = card_block.get("id")
    if not card_id:
        for k in ("href", "link", "url", "permalink", "card_url"):
            href = chosen.get(k)
            if isinstance(href, str):
                found = extract_card_id_from_href(href)
                if found:
                    card_id = found
                    break
    if not card_id:
        return None

    name = chosen.get("name") or (card_block and card_block.get("name")) or chosen.get("title") or ""
    rank = (chosen.get("rank") or (card_block and card_block.get("rank")) or "").strip()
    wanters_count = chosen.get("wanters_count", 0)
    owners_count = chosen.get("owners_count", 0)

    return {
        "card_id": int(card_id), 
        "name": name or "", 
        "rank": rank or "", 
        "wanters_count": wanters_count,
        "owners_count": owners_count,
        "file": str(path)
    }

def save_suitable_cards(
    profile_data: Dict,
    my_cards: List[Dict[str, Any]], 
    target_card: Dict[str, Any],
    profiles_dir: pathlib.Path,
    debug: bool = False
) -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–∞—Ä—Ç—ã, –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –¥–ª—è –æ–±–º–µ–Ω–∞ –Ω–∞ —Ü–µ–ª–µ–≤—É—é –∫–∞—Ä—Ç—É.
    """
    from mangabuff.services.card_selector import CardWantersCache, get_card_wanters_count
    from mangabuff.parsing.cards import entry_instance_id
    
    cache = CardWantersCache(profiles_dir)
    target_rank = (target_card.get("rank") or "").strip()
    target_wanters = target_card.get("wanters_count", 0)
    
    suitable_cards = []
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞—Ä—Ç—ã –ø–æ —Ä–∞–Ω–≥—É
    for card in my_cards:
        card_rank = None
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–Ω–≥ –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Å—Ç
        if card.get("rank"):
            card_rank = str(card.get("rank")).strip()
        elif card.get("grade"):
            card_rank = str(card.get("grade")).strip()
        elif isinstance(card.get("card"), dict):
            if card["card"].get("rank"):
                card_rank = str(card["card"].get("rank")).strip()
            elif card["card"].get("grade"):
                card_rank = str(card["card"].get("grade")).strip()
        
        if card_rank == target_rank:
            inst_id = entry_instance_id(card)
            if inst_id:
                card_id = card.get("card_id")
                if not card_id and isinstance(card.get("card"), dict):
                    card_id = card["card"].get("id")
                
                if card_id:
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–µ–ª–∞—é—â–∏—Ö
                    wanters = get_card_wanters_count(profile_data, int(card_id), cache, debug=debug)
                    
                    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–∞—Ä—Ç—ã
                    name = card.get("title") or card.get("name") or ""
                    if not name and isinstance(card.get("card"), dict):
                        name = card["card"].get("name") or card["card"].get("title") or ""
                    
                    suitable_cards.append({
                        "instance_id": inst_id,
                        "card_id": int(card_id),
                        "name": name,
                        "rank": card_rank,
                        "wanters_count": wanters,
                        "suitable": wanters <= target_wanters
                    })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –∂–µ–ª–∞—é—â–∏—Ö
    suitable_cards.sort(key=lambda x: x["wanters_count"])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    out_path = profiles_dir / "suitable_cards_for_trade.json"
    with out_path.open("w", encoding="utf-8") as f:
        json.dump({
            "target_card": {
                "card_id": target_card.get("card_id"),
                "name": target_card.get("name"),
                "rank": target_card.get("rank"),
                "wanters_count": target_card.get("wanters_count")
            },
            "suitable_cards": suitable_cards,
            "total": len(suitable_cards),
            "updated_at": time.strftime("%Y-%m-%d %H:%M:%S")
        }, f, ensure_ascii=False, indent=2)
    
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {len(suitable_cards)} –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∫–∞—Ä—Ç –≤ suitable_cards_for_trade.json")
    if suitable_cards:
        best_cards = [c for c in suitable_cards if c["suitable"]][:3]
        if best_cards:
            print(f"   –õ—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã (–∂–µ–ª–∞—é—â–∏—Ö ‚â§ {target_wanters}):")
            for c in best_cards:
                print(f"   - {c['name']}: {c['wanters_count']} –∂–µ–ª–∞—é—â–∏—Ö")

def monitor_boost_with_trades_loop(
    profile_data: Dict,
    profiles_dir: pathlib.Path,
    boost_url: str,
    monitor_interval: float = 5.0,
    trade_pages: int = 0,
    dry_run: bool = True,
    debug: bool = False
) -> None:
    """
    –¶–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—É—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º –æ–±–º–µ–Ω–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ä—Ç—ã.
    """
    monitor = BoostMonitor(profile_data, profiles_dir, boost_url, debug=debug)
    
    print(f"üîç –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—É—Å—Ç–∞ (–∏–Ω—Ç–µ—Ä–≤–∞–ª: {monitor_interval}—Å)")
    print(f"üìä –†–µ–∂–∏–º: {'DRY-RUN (—Ç–µ—Å—Ç–æ–≤—ã–π)' if dry_run else '–ë–û–ï–í–û–ô (—Ä–µ–∞–ª—å–Ω—ã–µ –æ–±–º–µ–Ω—ã)'}")
    
    try:
        while True:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –±—É—Å—Ç–∞
            changes, card_id, can_donate, has_find_button = monitor.parse_boost_page()
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏
            current_time = time.time()
            if current_time - monitor.last_check > 60:
                print(f"üìä –°—Ç–∞—Ç—É—Å –±—É—Å—Ç–∞: –∑–∞–º–µ–Ω—ã={changes}/10, –∫–∞—Ä—Ç–∞={card_id}, –¥–æ–Ω–µ–π—Ç={'–¥–∞' if can_donate else '–Ω–µ—Ç'}")
                monitor.last_check = current_time
            
            # –ï—Å–ª–∏ –º–æ–∂–µ–º –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É
            if can_donate and not monitor.can_donate:
                print(f"üíé –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –∫–∞—Ä—Ç—É!")
                monitor.can_donate = True
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–Ω–µ–π—Ç
                if monitor.donate_card():
                    time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä—É –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
                    
                    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –≤–∫–ª–∞–¥–∞
                    print(f"üîç –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –≤–∫–ª–∞–¥–∞...")
                    res = find_boost_card_info(profile_data, profiles_dir, boost_url, debug=debug)
                    
                    if res:
                        new_card_id, out_path = res
                        monitor.current_card_id = new_card_id
                        
                        try:
                            with out_path.open("r", encoding="utf-8") as f:
                                card_data = json.load(f)
                            print(f"‚úÖ –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –≤–∫–ª–∞–¥–∞:")
                            print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {card_data.get('name', '')}")
                            print(f"   ID: {card_data.get('card_id')} | –†–∞–Ω–≥: {card_data.get('rank')}")
                            print(f"   –í–ª–∞–¥–µ–ª—å—Ü–µ–≤: {card_data.get('owners_count')} | –ñ–µ–ª–∞—é—â–∏—Ö: {card_data.get('wanters_count')}")
                        except Exception:
                            print(f"‚úÖ –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∞ {new_card_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                    else:
                        print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ä—Ç—É –¥–ª—è –≤–∫–ª–∞–¥–∞")
                
                monitor.can_donate = False
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–ª–µ–≤—É—é –∫–∞—Ä—Ç—É
            target_card = load_target_card_from_file(profiles_dir, debug=debug)
            if not target_card:
                print("‚è∏Ô∏è  –û–∂–∏–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –≤–∫–ª–∞–¥–∞...")
                time.sleep(monitor_interval)
                continue
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –ª–∏ –∫–∞—Ä—Ç–∞
            if card_id and card_id != monitor.current_card_id:
                print(f"üîÑ –ö–∞—Ä—Ç–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å: {monitor.current_card_id} ‚Üí {card_id}")
                monitor.current_card_id = card_id
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—Ä—Ç–µ
                res = find_boost_card_info(profile_data, profiles_dir, boost_url, debug=debug)
                if res:
                    target_card = load_target_card_from_file(profiles_dir, debug=debug)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
            try:
                inv_path = ensure_own_inventory(pathlib.Path(profiles_dir), profile_data, debug=debug)
                with inv_path.open("r", encoding="utf-8") as f:
                    my_cards = json.load(f)
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
                time.sleep(30)
                continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ä—Ç—ã
            save_suitable_cards(profile_data, my_cards, target_card, profiles_dir, debug=debug)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–º–µ–Ω—ã
            print(f"\nüéØ –û–±–º–µ–Ω—ã –¥–ª—è –∫–∞—Ä—Ç—ã: ID={target_card['card_id']}, –†–∞–Ω–≥={target_card['rank']}")
            
            owners_iter = iter_online_owners_by_pages(
                profile_data, 
                int(target_card["card_id"]), 
                max_pages=trade_pages, 
                debug=debug
            )
            
            stats = send_trades_to_online_owners(
                profile_data=profile_data,
                target_card=target_card,
                owners_iter=owners_iter,
                my_cards=my_cards,
                dry_run=dry_run,
                debug=debug,
                profiles_dir=profiles_dir
            )
            
            # –ï—Å–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤—Å–µ—Ö, –∂–¥–µ–º –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
            if stats.get("owners_seen", 0) == 0:
                print("üí§ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤, –æ–∂–∏–¥–∞–Ω–∏–µ...")
                time.sleep(60)
            else:
                time.sleep(monitor_interval)
    
    except KeyboardInterrupt:
        print("\n‚õî –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ Ctrl+C")

def main():
    parser = argparse.ArgumentParser(description="MangaBuff helper (modular)")
    parser.add_argument("--dir", type=str, default=".", help="–†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞")
    parser.add_argument("--name", required=True, help="–ò–º—è –ø—Ä–æ—Ñ–∏–ª—è")
    parser.add_argument("--email", required=True, help="Email")
    parser.add_argument("--password", required=True, help="Password")
    parser.add_argument("--club_name", help="–ù–∞–∑–≤–∞–Ω–∏–µ –∫–ª—É–±–∞")
    parser.add_argument("--id", type=int, help="user id")
    parser.add_argument("--boost_url", help="boost url")
    parser.add_argument("--debug", action="store_true", help="Debug mode")
    parser.add_argument("--skip_check", action="store_true", help="Skip some checks")
    parser.add_argument("--trade_card_id", type=int, default=0, help="ID –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞")
    parser.add_argument("--trade_card_name", type=str, default="", help="–ò–º—è –∫–∞—Ä—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–∞")
    parser.add_argument("--trade_rank", type=str, default="", help="–†–∞–Ω–≥ –∫–∞—Ä—Ç—ã (–±—É–∫–≤–∞)")
    parser.add_argument("--trade_pages", type=int, default=0, help="–°–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (0 = –≤—Å–µ)")
    parser.add_argument("--trade_send_online", action="store_true", help="–†–∞—Å—Å—ã–ª–∫–∞ –æ–±–º–µ–Ω–æ–≤ –æ–Ω–ª–∞–π–Ω –≤–ª–∞–¥–µ–ª—å—Ü–∞–º –∫–∞—Ä—Ç—ã")
    parser.add_argument("--trade_dry_run", type=int, default=1, help="1 = dry-run, 0 = —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å")
    parser.add_argument("--trade_card_file", type=str, default="", help="–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π (card_for_boost.json)")
    parser.add_argument("--use_api", type=int, default=1, help="1 = –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API /trades/create, 0 = —Ñ–æ—Ä–º—É (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
    parser.add_argument("--analyze_har", type=str, default="", help="–ü—É—Ç—å –∫ HAR-—Ñ–∞–π–ª—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
    parser.add_argument("--monitor_boost", action="store_true", help="–í–∫–ª—é—á–∏—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É—Å—Ç–∞ —Å –∞–≤—Ç–æ–¥–æ–Ω–µ–π—Ç–æ–º")
    parser.add_argument("--monitor_interval", type=float, default=5.0, help="–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—É—Å—Ç–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")

    args = parser.parse_args()

    store = ProfileStore(args.dir)
    profile_path = store.path_for(args.name)

    # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    profile = store.read_by_path(profile_path) or store.default_profile(user_id=str(args.id or "" ), club_name=args.club_name or "")
    store.write_by_path(profile_path, profile)

    # –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies
    ok, info = update_profile_cookies(profile, args.email, args.password, debug=False, skip_check=args.skip_check)
    if not ok:
        msg = info.get("message", "auth error")
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {msg}")
        return
    store.write_by_path(profile_path, profile)
    print(f"‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞")

    # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—É—Å—Ç–∞
    if args.monitor_boost:
        if not args.boost_url:
            print("‚ùå –î–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –±—É—Å—Ç–∞ —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å --boost_url")
            return
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç—É
        res = find_boost_card_info(profile, profile_path.parent, args.boost_url, debug=args.debug)
        if res:
            card_id, out_path = res
            try:
                with out_path.open("r", encoding="utf-8") as f:
                    card_data = json.load(f)
                print(f"‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ –¥–ª—è –≤–∫–ª–∞–¥–∞:")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {card_data.get('name', '')}")
                print(f"   ID: {card_data.get('card_id')} | –†–∞–Ω–≥: {card_data.get('rank')}")
                print(f"   –í–ª–∞–¥–µ–ª—å—Ü–µ–≤: {card_data.get('owners_count')} | –ñ–µ–ª–∞—é—â–∏—Ö: {card_data.get('wanters_count')}")
            except Exception:
                print(f"‚úÖ –ù–∞—á–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–∞ {card_id} –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –æ–±–º–µ–Ω–∞–º–∏
        monitor_boost_with_trades_loop(
            profile_data=profile,
            profiles_dir=profile_path.parent,
            boost_url=args.boost_url,
            monitor_interval=args.monitor_interval,
            trade_pages=args.trade_pages or 0,
            dry_run=bool(args.trade_dry_run),
            debug=args.debug
        )
        return

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    # Boost-–∫–∞—Ä—Ç–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if args.boost_url:
        res = find_boost_card_info(profile, profile_path.parent, args.boost_url, debug=args.debug)
        if res:
            card_id, out_path = res
            try:
                with out_path.open("r", encoding="utf-8") as f:
                    card_data = json.load(f)
                print(f"‚úÖ –ö–ª—É–±–Ω–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞:")
                print(f"   –ù–∞–∑–≤–∞–Ω–∏–µ: {card_data.get('name', '')}")
                print(f"   ID –∫–∞—Ä—Ç—ã: {card_data.get('card_id')} | Instance ID: {card_data.get('id')}")
                print(f"   –†–∞–Ω–≥: {card_data.get('rank')} | –í–ª–∞–¥–µ–ª—å—Ü–µ–≤: {card_data.get('owners_count')} | –ñ–µ–ª–∞—é—â–∏—Ö: {card_data.get('wanters_count')}")
                print(f"   –§–∞–π–ª: {out_path}")
            except Exception:
                print(f"‚úÖ –ö–ª—É–±–Ω–∞—è –∫–∞—Ä—Ç–∞ {card_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤: {out_path}")

    # HAR-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
    if args.analyze_har:
        top = analyze_har(args.analyze_har, debug=args.debug)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±–º–µ–Ω–æ–≤
    target_card: Optional[Dict[str, Any]] = None
    if args.trade_card_id and args.trade_rank:
        target_card = {"card_id": int(args.trade_card_id), "name": args.trade_card_name or "", "rank": args.trade_rank}
    else:
        target_card = load_target_card_from_file(profile_path.parent, args.trade_card_file or None, debug=args.debug)

    if not target_card:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
    try:
        inv_path = ensure_own_inventory(profile_path, profile, debug=args.debug)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è: {e}")
        return
    
    try:
        with inv_path.open("r", encoding="utf-8") as f:
            my_cards: List[Dict[str, Any]] = json.load(f)
    except Exception:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫–∞—Ä—Ç—ã –¥–ª—è –æ–±–º–µ–Ω–∞
    save_suitable_cards(profile, my_cards, target_card, profile_path.parent, debug=args.debug)

    if args.trade_send_online:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        print(f"\nüéØ –¶–µ–ª–µ–≤–∞—è –∫–∞—Ä—Ç–∞: ID={target_card['card_id']}, –†–∞–Ω–≥={target_card['rank']}, –ò–º—è={target_card.get('name', '')}")
        print(f"üîç –ü–æ–∏—Å–∫ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –æ–Ω–ª–∞–π–Ω...\n")
        
        card_id = int(target_card["card_id"])
        owners_iter = iter_online_owners_by_pages(profile, card_id, max_pages=args.trade_pages or 0, debug=args.debug)
        
        stats = send_trades_to_online_owners(
            profile_data=profile,
            target_card=target_card,
            owners_iter=owners_iter,
            my_cards=my_cards,
            dry_run=bool(args.trade_dry_run),
            debug=args.debug,
            profiles_dir=profile_path.parent
        )

if __name__ == "__main__":
    main()